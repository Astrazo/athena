class a{constructor(){this.audioContext=null,this.sounds={},this.isEnabled=localStorage.getItem("audioEnabled")!=="false",this.volume=parseFloat(localStorage.getItem("audioVolume"))||.7,this.init()}async init(){try{this.audioContext=new(window.AudioContext||window.webkitAudioContext),console.log("Audio context created, state:",this.audioContext.state),await this.createDefaultSounds(),console.log("Audio Manager initialized successfully, enabled:",this.isEnabled)}catch(t){console.warn("Audio Manager initialization failed:",t),this.isEnabled=!1}}async createDefaultSounds(){this.sounds.transmission=this.createTransmissionSound(),this.sounds.notification=this.createNotificationSound(),this.sounds.success=this.createSuccessSound(),this.sounds.error=this.createErrorSound(),this.sounds.ambient=this.createAmbientSound()}createTransmissionSound(){return()=>{if(!this.isEnabled||!this.audioContext)return;const t=this.audioContext.currentTime,i=2,e=this.audioContext.createOscillator(),o=this.audioContext.createGain();e.connect(o),o.connect(this.audioContext.destination),e.frequency.setValueAtTime(800,t),e.frequency.setValueAtTime(1200,t+.1),e.frequency.setValueAtTime(800,t+.2),e.frequency.setValueAtTime(1200,t+.3),e.frequency.setValueAtTime(800,t+.4),o.gain.setValueAtTime(0,t),o.gain.linearRampToValueAtTime(this.volume*.3,t+.05),o.gain.exponentialRampToValueAtTime(.001,t+.15),o.gain.setValueAtTime(0,t+.2),o.gain.linearRampToValueAtTime(this.volume*.3,t+.25),o.gain.exponentialRampToValueAtTime(.001,t+.35),o.gain.setValueAtTime(0,t+.4),o.gain.linearRampToValueAtTime(this.volume*.3,t+.45),o.gain.exponentialRampToValueAtTime(.001,t+.55),e.start(t),e.stop(t+i)}}createNotificationSound(){return()=>{if(console.log("Notification sound function called, enabled:",this.isEnabled,"context:",!!this.audioContext),!this.isEnabled||!this.audioContext){console.log("Audio disabled or no context, returning");return}console.log("Creating notification sound...");const t=this.audioContext.currentTime,i=this.audioContext.createOscillator(),e=this.audioContext.createGain();i.connect(e),e.connect(this.audioContext.destination),i.frequency.setValueAtTime(1e3,t),i.frequency.setValueAtTime(1200,t+.1),e.gain.setValueAtTime(0,t),e.gain.linearRampToValueAtTime(this.volume*.2,t+.05),e.gain.exponentialRampToValueAtTime(.001,t+.2),i.start(t),i.stop(t+.3),console.log("Notification sound started")}}createSuccessSound(){return()=>{if(!this.isEnabled||!this.audioContext)return;const t=this.audioContext.currentTime,i=this.audioContext.createOscillator(),e=this.audioContext.createGain();i.connect(e),e.connect(this.audioContext.destination),i.frequency.setValueAtTime(800,t),i.frequency.setValueAtTime(1e3,t+.1),i.frequency.setValueAtTime(1200,t+.2),i.frequency.setValueAtTime(1400,t+.3),e.gain.setValueAtTime(0,t),e.gain.linearRampToValueAtTime(this.volume*.25,t+.05),e.gain.exponentialRampToValueAtTime(.001,t+.4),i.start(t),i.stop(t+.5)}}createErrorSound(){return()=>{if(!this.isEnabled||!this.audioContext)return;const t=this.audioContext.currentTime,i=this.audioContext.createOscillator(),e=this.audioContext.createGain();i.connect(e),e.connect(this.audioContext.destination),i.frequency.setValueAtTime(600,t),i.frequency.setValueAtTime(500,t+.1),i.frequency.setValueAtTime(400,t+.2),e.gain.setValueAtTime(0,t),e.gain.linearRampToValueAtTime(this.volume*.2,t+.05),e.gain.exponentialRampToValueAtTime(.001,t+.3),i.start(t),i.stop(t+.4)}}createAmbientSound(){return()=>{if(!this.isEnabled||!this.audioContext)return;const t=this.audioContext.currentTime,i=this.audioContext.createOscillator(),e=this.audioContext.createGain();i.connect(e),e.connect(this.audioContext.destination),i.frequency.setValueAtTime(60,t),e.gain.setValueAtTime(0,t),e.gain.linearRampToValueAtTime(this.volume*.05,t+1),i.start(t),i.stop(t+5)}}play(t){this.sounds[t]?this.sounds[t]():console.warn(`Sound '${t}' not found`)}playTransmission(){this.play("transmission")}playNotification(){console.log("Playing notification sound, audio enabled:",this.isEnabled),this.play("notification")}playSuccess(){this.play("success")}playError(){this.play("error")}playAmbient(){this.play("ambient")}toggle(){return this.isEnabled=!this.isEnabled,localStorage.setItem("audioEnabled",this.isEnabled),this.isEnabled}setVolume(t){this.volume=Math.max(0,Math.min(1,t)),localStorage.setItem("audioVolume",this.volume)}getVolume(){return this.volume}isAudioEnabled(){return this.isEnabled}resume(){this.audioContext&&this.audioContext.state==="suspended"&&this.audioContext.resume()}testAudio(){var t;console.log("Testing audio system..."),console.log("Audio enabled:",this.isEnabled),console.log("Audio context state:",(t=this.audioContext)==null?void 0:t.state),console.log("Volume:",this.volume),this.audioContext&&this.audioContext.state==="suspended"?(console.log("Audio context suspended, attempting to resume..."),this.audioContext.resume().then(()=>{console.log("Audio context resumed, playing test sound..."),this.playNotification()})):(console.log("Playing test notification sound..."),this.playNotification())}}const n=new a,u=()=>n.playTransmission(),l=()=>n.playNotification();export{n as default,l as playNotification,u as playTransmission};
