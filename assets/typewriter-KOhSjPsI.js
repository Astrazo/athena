class u{constructor(){this.isActive=!1,this.currentText="",this.fullText="",this.currentIndex=0,this.speed=30,this.lineDelay=3e3,this.interval=null,this.onLineComplete=null,this.onLineSkip=null,this.isLastLineInSequence=!1,this.delayResolve=null,this.autoProgress=localStorage.getItem("dialogueAutoProgress")==="true",this.autoProgressTimeout=null,this.dialogueLog=[],this.logVisible=localStorage.getItem("dialogueLogVisible")==="true",this.currentSequence=[],this.currentSequenceIndex=0,this.currentSequenceOptions={},this.createDialogueElements()}createDialogueElements(){this.overlay=document.createElement("div"),this.overlay.className="dialogue-overlay",document.body.appendChild(this.overlay),this.container=document.createElement("div"),this.container.className="dialogue-container",this.container.innerHTML=`
            <div style="display: flex; gap: 10px; margin-bottom: 10px; position: relative; justify-content: space-between; align-items: center;">
                <button id="auto-toggle" class="dialogue-auto-toggle">Auto: OFF</button>
                <div style="display: flex; gap: 10px;">
                    <button id="log-toggle" class="dialogue-log-toggle">Log</button>
                    <button id="skip" class="dialogue-skip" style="position: static;">Skip</button>
                    <button id="skip-all" class="dialogue-skip" style="position: static;">Skip All</button>
                </div>
            </div>
            <p class="dialogue-text"></p>
            <button class="dialogue-continue">Continue</button>
        `,document.body.appendChild(this.container),this.logContainer=document.createElement("div"),this.logContainer.className="dialogue-log-container",this.logContainer.innerHTML=`
            <div class="dialogue-log-header">
                <h3>Dialogue Log</h3>
                <button id="log-close" class="dialogue-log-close">Ã—</button>
            </div>
            <div class="dialogue-log-content"></div>
        `,document.body.appendChild(this.logContainer),this.persistentLogButton=document.createElement("button"),this.persistentLogButton.className="persistent-log-button",this.persistentLogButton.innerHTML="ðŸ“–",this.persistentLogButton.title="Dialogue Log",document.body.appendChild(this.persistentLogButton),this.persistentLogButton.addEventListener("click",e=>{e.stopPropagation(),this.toggleDialogueLog()}),this.textElement=this.container.querySelector(".dialogue-text"),this.autoToggleButton=this.container.querySelector("#auto-toggle"),this.logToggleButton=this.container.querySelector("#log-toggle"),this.skipButton=this.container.querySelector("#skip"),this.skipAllButton=this.container.querySelector("#skip-all"),this.continueButton=this.container.querySelector(".dialogue-continue"),this.logContent=this.logContainer.querySelector(".dialogue-log-content"),this.logCloseButton=this.logContainer.querySelector("#log-close"),this.autoToggleButton.textContent=this.autoProgress?"Auto: ON":"Auto: OFF",this.autoToggleButton.classList.toggle("active",this.autoProgress),this.logVisible&&(this.logContainer.style.display="block"),this.autoToggleButton.addEventListener("click",e=>{e.stopPropagation(),this.toggleAutoProgress()}),this.logToggleButton.addEventListener("click",e=>{e.stopPropagation(),this.toggleDialogueLog()}),this.logCloseButton.addEventListener("click",e=>{e.stopPropagation(),this.hideDialogueLog()}),this.continueButton.addEventListener("click",e=>{e.stopPropagation(),this.isLastLineInSequence?this.onContinue?(this.onContinue(),this.hide()):this.hide():this.nextLine()}),this.skipAllButton.addEventListener("click",e=>{e.stopPropagation(),this.skipAll()}),this.skipButton.addEventListener("click",e=>{e.stopPropagation(),this.isLineComplete?this.nextLine():this.lineSkip()}),this.overlay.addEventListener("click",()=>{this.isLineComplete?this.nextLine():this.lineSkip()}),this.container.addEventListener("click",()=>{this.isLineComplete?this.nextLine():this.lineSkip()})}async showSequence(e,t={}){this.sequenceController=new AbortController;const s=Array.isArray(e)?e:[e];this.currentSequence=s,this.currentSequenceIndex=0,this.currentSequenceOptions=t;for(let o=0;o<s.length;o++){const a=s[o],n=o===s.length-1;if(this.currentSequenceIndex=o,await new Promise((i,l)=>{if(this.sequenceController.signal.aborted){l(new Error("Cancelled"));return}this.show(a,{...t,isLastLineInSequence:n,onLineComplete:n&&t.onLineComplete||i,onLineSkip:n&&t.onLineSkip||i})}).catch(()=>Promise.reject(new Error("Cancelled"))),this.sequenceController.signal.aborted)break;if(!n&&this.autoProgress)try{await new Promise((i,l)=>{this.delayResolve=i;const r=setTimeout(i,this.lineDelay);this.sequenceController.signal.addEventListener("abort",()=>{clearTimeout(r),l(new Error("Cancelled"))})})}catch(i){if(i.message==="Cancelled")break}else if(!n&&!this.autoProgress)try{await new Promise((i,l)=>{this.delayResolve=i,this.sequenceController.signal.addEventListener("abort",()=>{l(new Error("Cancelled"))})})}catch(i){if(i.message==="Cancelled")break}}this.currentSequence=[],this.currentSequenceIndex=0,this.currentSequenceOptions={}}show(e,t={}){this.isActive&&this.hide(!0),this.isActive=!0,this.isLineComplete=!1,this.fullText=e,this.currentText="",this.currentIndex=0,this.speed=t.speed||this.speed,this.isLastLineInSequence=t.isLastLineInSequence||!1,this.onLineComplete=t.onLineComplete||null,this.onContinue=t.onContinue||null,this.onLineSkip=t.onLineSkip||null,this.addToDialogueLog(e,t.characterName),this.overlay.style.display="block",this.container.style.display="block",this.continueButton.style.display="none",this.persistentLogButton.style.display="none",this.type()}hide(e=!1){this.textElement.textContent="",this.currentText="",this.fullText="",this.textElement.style.setProperty("--cursor-visible","none"),this.interval&&(clearInterval(this.interval),this.interval=null),this.clearAutoProgressTimeout(),console.log("Dialogue cleared."),e||(this.isActive=!1,this.overlay.style.display="none",this.container.style.display="none",this.persistentLogButton.style.display="flex",console.log("Dialogue box hidden."))}nextLine(){this.isLastLineInSequence?this.onContinue?(this.onContinue(),this.hide()):this.hide():this.delayResolve&&(this.delayResolve(),this.delayResolve=null)}type(){const e=()=>{this.isActive&&(this.currentIndex<this.fullText.length?(this.currentText+=this.fullText[this.currentIndex],this.textElement.textContent=this.currentText,this.currentIndex++,this.typingTimeout=setTimeout(e,this.speed)):this.lineComplete())};e()}lineComplete(){this.isLineComplete=!0,this.textElement.style.setProperty("--cursor-visible","inline-block"),(this.isLastLineInSequence||!this.autoProgress)&&(console.log("Dialogue line completed - showing continue button."),this.continueButton.style.display="block"),this.onLineComplete&&(console.log("Dialogue line completed."),this.onLineComplete())}toggleAutoProgress(){this.autoProgress=!this.autoProgress,this.autoToggleButton.textContent=this.autoProgress?"Auto: ON":"Auto: OFF",this.autoToggleButton.classList.toggle("active",this.autoProgress),localStorage.setItem("dialogueAutoProgress",this.autoProgress.toString()),this.autoProgress&&this.isLineComplete&&!this.isLastLineInSequence&&this.delayResolve&&(this.delayResolve(),this.delayResolve=null)}clearAutoProgressTimeout(){this.autoProgressTimeout&&(clearTimeout(this.autoProgressTimeout),this.autoProgressTimeout=null)}addToDialogueLog(e,t=null){const s=new Date().toLocaleTimeString(),o={text:e,character:t,timestamp:s};this.dialogueLog.push(o),this.updateDialogueLogDisplay()}updateDialogueLogDisplay(){if(this.logContent.innerHTML="",this.dialogueLog.length===0){const e=document.createElement("div");e.className="dialogue-log-empty",e.innerHTML=`
                <div class="dialogue-log-text">No dialogue.</div>
            `,this.logContent.appendChild(e)}else this.dialogueLog.forEach((e,t)=>{const s=document.createElement("div");s.className="dialogue-log-entry";let o=e.text;e.character&&(o=`${e.character}: ${e.text}`),s.innerHTML=`
                    <div class="dialogue-log-text">${o}</div>
                    <div class="dialogue-log-timestamp">${e.timestamp}</div>
                `,this.logContent.appendChild(s)});this.logContent.scrollTop=this.logContent.scrollHeight}toggleDialogueLog(){this.logVisible?this.hideDialogueLog():this.showDialogueLog()}showDialogueLog(){this.logVisible=!0,this.logContainer.style.display="block",this.updateDialogueLogDisplay(),localStorage.setItem("dialogueLogVisible","true")}hideDialogueLog(){this.logVisible=!1,this.logContainer.style.display="none",localStorage.setItem("dialogueLogVisible","false")}lineSkip(){this.typingTimeout&&(clearTimeout(this.typingTimeout),this.typingTimeout=null),this.currentText=this.fullText,this.textElement.textContent=this.currentText,this.lineComplete(),this.onLineSkip&&this.onLineSkip(),console.log("Skip called.")}skipAll(){this.currentSequence&&this.currentSequence.length>0&&this.currentSequence.slice(this.currentSequenceIndex+1).forEach(t=>{this.addToDialogueLog(t,this.currentSequenceOptions.characterName)}),this.interval&&clearInterval(this.interval),this.clearAutoProgressTimeout(),this.sequenceController&&this.sequenceController.abort(),this.onLineComplete&&this.onLineComplete(),this.onLineSkip&&this.onLineSkip(),this.onContinue&&this.onContinue(),this.currentSequence=[],this.currentSequenceIndex=0,this.currentSequenceOptions={},this.hide(),console.log("All dialogue skipped and remaining lines added to log.")}showWithCharacter(e,t,s={}){const o=`${e}: ${t}`;this.show(o,{...s,characterName:e})}}window.typewriter=new u;
